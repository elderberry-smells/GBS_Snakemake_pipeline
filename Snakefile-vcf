from pathlib import Path

#### Functions ####
def listed_bams(bam_path):
    """
    move through the list of supplied bam directories and create a final output list of path/sample.bam
    :param bam_path: from config file - config['samples']
    :return: a list of all sorted bams to create VCF file
    """
    with open('bams.list', 'w') as bam_out:
        for bamdir in bam_path:
            # list all .bam files in directories from config file, append to final list of samples
            path_bams = Path(bamdir).glob('*.bam')
            for i in path_bams:
                bamline = f'{str(i)}\n'
                bam_out.write(bamline)


def chromosome_list(chromfile):
    chromosomes = []
    scaffolds = []
    with open(chromfile, 'r') as chr:
        for line in chr:
            content=line.split()
            if 'scaffold' in content[0].lower():
                scaffolds.append(content[0])
            else:
                chromosomes.append(content[0])

    # write out the scaffolds if present
    if len(scaffolds) > 0:
        scaffold = 'scaffolds.txt'
        with open(scaffold, 'w') as scaf:
            for line in scaffolds:
                scaf.write(line + '\n')
    else:
        scaffold = False

    return chromosomes, scaffold


#### Inputs and Rules ####
home_dir = Path.home()
configfile: f'{home_dir}/gbs/GBS_snakemake_pipeline/config/config_vcf.yaml'

# take the outdir input from the configfile.yaml and make that the working directory if not exists
out_path = config['outfile']
Path(out_path).mkdir(parents=True, exist_ok=True)
workdir: out_path

# get the info out of the config file into variables
p_dir = Path(out_path).parts[-1]  # the final folder in the outfile entry for snp file naming
reference = config['reference']
chr_file = f"{reference}.fai"

try:
    chr_list, scaffolds = chromosome_list(chr_file)

    if scaffolds:  # add on to the list to make a vcf for chromosomes (if any)
        chr_list.append("scaffolds")

except AttributeError as exception:
    print(f"{exception}\n"
          f"Your reference genome has not been indexed.  Please run the following cmnd in the reference directory\n"
          f"$ samtools faidx {reference}")

split_chr = config['split']  # determine from config if the VCF should be split into parts when running bcftools

# generate the bams.list file for this run into the working directory
listed_bams(config['sample_directories'])

rule all:
    input:
        expand(["chromosomes/{vcf_name}.{chrom}.vcf", "chromosomes/{vcf_name}.vcf"] if split_chr
               else "{vcf_name}.vcf", vcf_name=p_dir, chrom=chr_list)


# determine from the config file how to handle the VCF outputs
if split_chr:
    include: f"{home_dir}/gbs/GBS_snakemake_pipeline/workflow/rules/vcf_by_chrom.smk"
else:
    include: f"{home_dir}/gbs/GBS_snakemake_pipeline/workflow/rules/bcftools_vcf.smk"
